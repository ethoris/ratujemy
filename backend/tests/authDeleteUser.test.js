const request = require('supertest');
const app = require('../index'); // Upewnij siƒô, ≈ºe importujesz poprawnie aplikacjƒô
const { User } = require('../models');
const jwt = require('jsonwebtoken');
const config = require('../config/env/development');

let token;
let userId;

beforeAll(async () => {
  // üîπ Tworzymy u≈ºytkownika testowego
  const user = await User.create({
    email: 'deleteuser@example.com',
    passwordHash: 'testpassword123',
  });

  userId = user.id;

  // üîπ Tworzymy token JWT
  token = jwt.sign({ id: user.id, email: user.email }, config.JWT_SECRET, { expiresIn: '1h' });
});

afterAll(async () => {
  // Usuniƒôcie testowych danych po zako≈Ñczeniu test√≥w
  await User.destroy({ where: { email: 'deleteuser@example.com' } });
});

describe('üóëÔ∏è DELETE /api/users/:id - Usuwanie u≈ºytkownika', () => {
  test('‚úÖ Powinno usunƒÖƒá u≈ºytkownika przy poprawnym tokenie', async () => {
    const res = await request(app)
      .delete(`/api/users/${userId}`)
      .set('Authorization', `Bearer ${token}`);

    expect(res.statusCode).toBe(200);
    expect(res.body.message).toMatch(/U≈ºytkownik zosta≈Ç usuniƒôty/);
  });

  test('‚ùå Powinno zwr√≥ciƒá b≈ÇƒÖd 404, je≈õli u≈ºytkownik nie istnieje', async () => {
    const res = await request(app)
      .delete('/api/users/99999') // ID, kt√≥re raczej nie istnieje
      .set('Authorization', `Bearer ${token}`);

    expect(res.statusCode).toBe(404);
    expect(res.body.error).toMatch(/U≈ºytkownik nie istnieje/);
  });

  test('‚ùå Powinno zwr√≥ciƒá b≈ÇƒÖd 401, je≈õli brak tokena', async () => {
    const res = await request(app).delete(`/api/users/${userId}`);

    expect(res.statusCode).toBe(401);
    expect(res.body.error).toMatch(/Brak tokena/);
  });

  test('‚ùå Powinno zwr√≥ciƒá b≈ÇƒÖd 403, je≈õli token jest nieprawid≈Çowy', async () => {
    const res = await request(app)
      .delete(`/api/users/${userId}`)
      .set('Authorization', 'Bearer FAKE_TOKEN');

    expect(res.statusCode).toBe(403);
    expect(res.body.error).toMatch(/Nieprawid≈Çowy token/);
  });
});
